name: Deploy Supabase Migrations

on:
  push:
    branches:
      - main
      - feature/*
    paths:
      - 'supabase/migrations/**'
  pull_request:
    paths:
      - 'supabase/migrations/**'

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
      SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      # For pull requests, we'll just validate the migrations without applying them
      - name: Validate Migrations (Pull Request)
        if: github.event_name == 'pull_request'
        run: |
          echo "Validating migrations for pull request..."
          supabase link --project-ref "${{ env.SUPABASE_PROJECT_ID }}" -p "${{ env.SUPABASE_DB_PASSWORD }}"
          
          # Check if there are new migration files
          NEW_MIGRATIONS=$(find supabase/migrations -name "*.sql" | grep -v "README.md" || echo "")
          
          if [ -n "$NEW_MIGRATIONS" ]; then
            echo "Found migration files to validate:"
            echo "$NEW_MIGRATIONS"
            
            # Validate SQL syntax of each migration file
            for migration in $NEW_MIGRATIONS; do
              echo "Validating SQL syntax in $migration..."
              # Check basic SQL syntax (this won't catch all errors but will catch major ones)
              cat "$migration" | grep -v "^--" | grep -q ";" || { echo "Error: No SQL statements found in $migration"; exit 1; }
            done
            
            echo "All migration files passed basic validation"
          else
            echo "No migration files found to validate"
          fi

      # For feature branch pushes, deploy to preview
      - name: Deploy Migrations (Preview)
        if: github.event_name == 'push' && github.ref != 'refs/heads/main'
        run: |
          echo "Deploying migrations to preview environment..."
          supabase link --project-ref "${{ env.SUPABASE_PROJECT_ID }}" -p "${{ env.SUPABASE_DB_PASSWORD }}"
          
          # Show current migration status
          echo "Current migration status:"
          supabase migration list
          
          # Check for migration mismatch
          if supabase db push 2>&1 | grep -q "Remote migration versions not found in local migrations directory"; then
            echo "Detected migration history mismatch. Fixing before proceeding..."
            
            # Repair the migration history for the problematic migration
            # This marks the migration as reverted in the history table
            supabase migration repair --status reverted 20250227
            
            # Try pushing migrations again
            supabase db push
          else
            # If no mismatch, just push the migrations
            supabase db push
          fi
          
          echo "Preview migrations deployed successfully."

      # For main branch pushes, deploy to production
      - name: Deploy Migrations (Production)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "Deploying migrations to production environment..."
          supabase link --project-ref "${{ env.SUPABASE_PROJECT_ID }}" -p "${{ env.SUPABASE_DB_PASSWORD }}"
          
          # Show current migration status
          echo "Current migration status:"
          supabase migration list
          
          # Check for migration mismatch
          if supabase db push 2>&1 | grep -q "Remote migration versions not found in local migrations directory"; then
            echo "Detected migration history mismatch. Fixing before proceeding..."
            
            # Repair the migration history for the problematic migration
            # This marks the migration as reverted in the history table
            supabase migration repair --status reverted 20250227
            
            # Try pushing migrations again
            supabase db push
          else
            # If no mismatch, just push the migrations
            supabase db push
          fi
          
          echo "Production migrations deployed successfully."
